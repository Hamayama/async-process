name: Build

on:
  push:
  pull_request:
  #schedule:
  #  - cron: '0 */2 * * *'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      OS_NAME: unknown
      ARCH_NAME: unknown
      DLL_NAME: libasyncprocess.so
      RESULT_NAME: result-linux
      RESULT_PATH: result-linux
      RESULT_PATH_SUB: result-async/static
    steps:
    - uses: actions/checkout@v2
    - name: Set environment variables
      run: |
        pwd
        uname
        uname -m
        OS_NAME=`uname`
        ARCH_NAME=`uname -m`
        echo "::set-env name=OS_NAME::$OS_NAME"
        echo "::set-env name=ARCH_NAME::$ARCH_NAME"
    - name: Build
      run: |
        gcc -v
        rm static/$ARCH_NAME/$OS_NAME/$DLL_NAME
        ./bootstrap
    - name: Copy result
      if: always()
      run: |
        mkdir -p $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
        cp static/$ARCH_NAME/$OS_NAME/$DLL_NAME $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.RESULT_NAME }}
        path: ${{ env.RESULT_PATH }}

  build-linux-aarch64:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      OS_NAME: Linux
      ARCH_NAME: aarch64
      DLL_NAME: libasyncprocess.so
      RESULT_NAME: result-linux-aarch64
      RESULT_PATH: result-linux-aarch64
      RESULT_PATH_SUB: result-async/static
    steps:
    - uses: actions/checkout@v2
    - name: Build on aarch64 (arm64)
      id: runcmd
      uses: uraimo/run-on-arch-action@v1.0.5
      with:
        architecture: aarch64
        distribution: ubuntu18.04
        run: |
          apt-get update
          apt-get -y install build-essential
          apt-get -y install automake
          apt-get -y install libtool
          pwd
          uname
          uname -m
          gcc -v
          rm static/${{ env.ARCH_NAME }}/${{ env.OS_NAME }}/${{ env.DLL_NAME }}
          ./bootstrap
    - name: Copy result
      if: always()
      run: |
        mkdir -p $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
        cp static/$ARCH_NAME/$OS_NAME/$DLL_NAME $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.RESULT_NAME }}
        path: ${{ env.RESULT_PATH }}

  build-osx:
    runs-on: macos-latest
    timeout-minutes: 90
    env:
      OS_NAME: unknown
      ARCH_NAME: unknown
      DLL_NAME: libasyncprocess.so
      RESULT_NAME: result-osx
      RESULT_PATH: result-osx
      RESULT_PATH_SUB: result-async/static
    steps:
    - uses: actions/checkout@v2
    - name: Set environment variables
      run: |
        pwd
        uname
        uname -m
        OS_NAME=`uname`
        ARCH_NAME=`uname -m`
        echo "::set-env name=OS_NAME::$OS_NAME"
        echo "::set-env name=ARCH_NAME::$ARCH_NAME"
    - name: Install tools
      run: |
        brew install automake
        #brew install libtool
        which glibtoolize
        ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
        which libtoolize
    - name: Build
      run: |
        gcc -v
        rm static/$ARCH_NAME/$OS_NAME/$DLL_NAME
        ./bootstrap
    - name: Copy result
      if: always()
      run: |
        mkdir -p $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
        cp static/$ARCH_NAME/$OS_NAME/$DLL_NAME $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.RESULT_NAME }}
        path: ${{ env.RESULT_PATH }}

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686]
        include:
        - arch: x86_64
          arch2: x86_64
          bit: 64
        - arch: i686
          arch2: x86
          bit: 32
    env:
      MSYSTEM: MINGW${{ matrix.bit }}
      MSYS2_PATH_TYPE: inherit
      MSYS2_PATH_LIST: C:\msys64\mingw${{ matrix.bit }}\bin;C:\msys64\usr\local\bin;C:\msys64\usr\bin;C:\msys64\bin
      OS_NAME: windows
      ARCH_NAME: ${{ matrix.arch2 }}
      DLL_NAME: libasyncprocess.dll
      RESULT_NAME: result-windows-${{ matrix.arch }}
      RESULT_PATH: result-windows-${{ matrix.arch }}
      RESULT_PATH_SUB: result-async/static
    steps:
    - run: git config --global core.autocrlf false
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v1
      with:
        msystem: MINGW${{ matrix.bit }}
        path-type: inherit
        release: false
        update: true
        cache: true
    - name: Add MSYS2 path
      run: |
        echo "::set-env name=PATH::$env:MSYS2_PATH_LIST;$env:PATH"
    - name: Run MSYS2 once
      run: |
        bash -lc @'
          pwd
          cd $GITHUB_WORKSPACE
          pwd
          uname
          uname -m
          echo $PATH
        '@
    - name: Build
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          gcc -v
          rm static/$ARCH_NAME/$OS_NAME/$DLL_NAME
          ./bootstrap
        '@
    - name: Copy result
      if: always()
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          mkdir -p $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
          cp static/$ARCH_NAME/$OS_NAME/$DLL_NAME $RESULT_PATH/$RESULT_PATH_SUB/$ARCH_NAME/$OS_NAME
        '@
    - name: Upload result
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.RESULT_NAME }}
        path: ${{ env.RESULT_PATH }}

